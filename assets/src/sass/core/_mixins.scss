// ==========================================================================
// Mixins
// ==========================================================================

/// Provides an easy way to include a clearfix for containing floats.
///
/// @link http://cssmojo.com/latest_new_clearfix_so_far/
///
/// @example scss - Usage
///   .element {
///     @include clearfix;
///   }
///
/// @example css - CSS Output
///   .element::after {
///     clear: both;
///     content: "";
///     display: table;
///   }

@mixin clearfix {

    &::after {
        clear: both;
        content: "";
        display: table;
    }
}

/// Word Wrapping
///
/// Break lines within words in order to prevent overflow for long, unbreakable
/// strings.
///
/// Spec introduces new property 'overflow-wrap', but word-break should still be treated as alternative
/// Reference: http://www.w3.org/TR/css3-text/#overflow-wrap
///
/// Previous approach was too aggressive in that it broke words wherever.
///
/// @link https://css-tricks.com/snippets/css/prevent-long-urls-from-breaking-out-of-container/
/// @link (old) http://kenneth.io/blog/2012/03/04/word-wrapping-hypernation-using-css/

@mixin overflow-wrap() {

    /* Non standard for webkit */
    word-break: break-word;

    overflow-wrap: break-word;

    -webkit-hyphens: auto;
    -moz-hyphens: auto;
    hyphens: auto;
}

///
/// Cross browser support for word wrapping.
///
/// @link http://kenneth.io/blog/2012/03/04/word-wrapping-hypernation-using-css/
/// @link https://css-tricks.com/snippets/css/prevent-long-urls-from-breaking-out-of-container/
///

@mixin word-wrap {

    /* Warning: Needed for oldIE (lte ie8) support, but words are broken up letter-by-letter */
    // -ms-word-break: break-all;
    //     word-break: break-all;

    /* Non standard for webkit */
    word-break: break-word;

    -webkit-hyphens: auto;
    -moz-hyphens: auto;
    -ms-hyphens: auto;
    hyphens: auto;
}

// Baseline, measured in pixels
//
// The value should be the same as the font-size value for the html element
// If the html element's font-size is set to 62.5% (of the browser's default font-size of 16px),
// then the variable below would be 10px.
//
// @Bug - 04/08/2015
//
// Version: Libsass 3.1 (grunt-sass 0.18.0 or greater).
// Issue: Can't calculate values with units (e.g. $baseline-px / 1rem * 1;)
// Error: 3.9px/px/rem is not a valid CSS value
// Fix: Libsass 3.2 will resolve issue
// Temporary Fix: https://github.com/rowanmanning/rem

// Baseline
$baseline-px: 16 !default;

// Get the rem equivalent of a value
@function rem-value($value) {

    // If value is a number, do some magic rem stuff
    @if type-of($value)=="number"and unit($value)=="px" {

        // Slightly hacky way of removing unit
        $unitless-value: $value / ($value * 0 + 1);

        // Return rem value
        @return #{$unitless-value / $baseline-px}rem;
    }

    // Non-numeric value, just return
    @return $value;
}

// Rem mixin
@mixin rem($property, $values) {

    // Loop over pixel values to get rem values
    $rem-values: unquote("");

    @each $value in $values {
        $rem-values: append($rem-values, rem-value($value));
    }

    // Set the pixel/rem values
    #{$property}: $values;
    #{$property}: $rem-values;
}

@-webkit-keyframes pop {
    0% {
        -webkit-transform-origin: 50% 50%;
        transform-origin: 50% 50%;
        -webkit-transform: scale(1);
        transform: scale(1);
    }

    33% {
        -webkit-transform: scale(1.25);
        transform: scale(1.25);
    }

    66% {
        -webkit-transform: scale(0.75);
        transform: scale(0.75);
    }

    100% {
        -webkit-transform: scale(1);
        transform: scale(1);
    }
}

@-webkit-keyframes focus-in-expand {
    0% {
        letter-spacing: -.5em;
        -webkit-filter: blur(12px);
        filter: blur(12px);
        opacity: 0;
    }

    100% {
        -webkit-filter: blur(0);
        filter: blur(0);
        opacity: 1;
    }
}

@keyframes focus-in-expand {
    0% {
        letter-spacing: -.5em;
        -webkit-filter: blur(12px);
        filter: blur(12px);
        opacity: 0;
    }

    100% {
        -webkit-filter: blur(0);
        filter: blur(0);
        opacity: 1;
    }
}

@-webkit-keyframes tracking-in-expand {
    0% {
        letter-spacing: -.5em;
        opacity: 0;
    }

    40% {
        opacity: .6;
    }

    100% {
        opacity: 1;
    }
}

@keyframes tracking-in-expand {
    0% {
        letter-spacing: -.5em;
        opacity: 0;
    }

    40% {
        opacity: .6;
    }

    100% {
        opacity: 1;
    }
}

@-webkit-keyframes kenburns-top-right {
    0% {
        -webkit-transform: scale(1) translate(0, 0);
        transform: scale(1) translate(0, 0);
        -webkit-transform-origin: 84% 16%;
        transform-origin: 84% 16%;
    }

    100% {
        -webkit-transform: scale(1.25) translate(20px, -15px);
        transform: scale(1.25) translate(20px, -15px);
        -webkit-transform-origin: right top;
        transform-origin: right top;
    }
}

@keyframes kenburns-top-right {
    0% {
        -webkit-transform: scale(1) translate(0, 0);
        transform: scale(1) translate(0, 0);
        -webkit-transform-origin: 84% 16%;
        transform-origin: 84% 16%;
    }

    100% {
        -webkit-transform: scale(1.25) translate(20px, -15px);
        transform: scale(1.25) translate(20px, -15px);
        -webkit-transform-origin: right top;
        transform-origin: right top;
    }
}

@-webkit-keyframes kenburns-top {
    0% {
        -webkit-transform: scale(1) translateY(0);
        transform: scale(1) translateY(0);
        -webkit-transform-origin: 50% 16%;
        transform-origin: 50% 16%;
    }

    100% {
        -webkit-transform: scale(1.25) translateY(-15px);
        transform: scale(1.25) translateY(-15px);
        -webkit-transform-origin: top;
        transform-origin: top;
    }
}

@keyframes kenburns-top {
    0% {
        -webkit-transform: scale(1) translateY(0);
        transform: scale(1) translateY(0);
        -webkit-transform-origin: 50% 16%;
        transform-origin: 50% 16%;
    }

    100% {
        -webkit-transform: scale(1.25) translateY(-15px);
        transform: scale(1.25) translateY(-15px);
        -webkit-transform-origin: top;
        transform-origin: top;
    }
}